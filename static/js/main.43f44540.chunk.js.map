{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","Fragment","alert","className","concat","Type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","type","data-bs-dismiss","aria-label","About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setmyStyle","_useState3","_useState4","btnText","setBtnText","classNameName","style","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Navbar","mode","href","title","aria-current","aboutText","updateColor","ToggleMode","htmlFor","TextForm","text","setText","heading","backgroundcolour","rows","value","onChange","event","console","log","target","showAlert","newText","split","join","length","App","setColor","setMode","_useState5","_useState6","setAlert","message","setTimeout","color_name","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.43f44540.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <>\r\n           { props.alert && <div className={`alert alert-${props.alert.Type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.Type)}: </strong>{props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black',\r\n    })\r\n    const [btnText, setBtnText] = useState(\"Enable Light mode\")\r\n\r\n    let toggleStyle = () =>{\r\n        if (myStyle.color === 'white'){\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid red',\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div classNameName='container' style={myStyle}>\r\n        <h2>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" style={myStyle} className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary my-4\" type='button' onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/about\">{props.aboutText}</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/\" onClick={props.updateColor('green')}>Green_Template</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/about\" onClick={props.updateColor('blue')}>Blue_Template</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/\" onClick={props.updateColor('yellow')}>Yellow_Template</a>\r\n              </li>\r\n\r\n\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n\r\n              <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\" onClick={props.ToggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label text-white\" htmlFor=\"flexSwitchCheckDefault\">on/off</label>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"to analyze\");\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"convert to upper case letter\", 'info');\r\n    }\r\n    const handleLowerClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"convert to lower case letter\", 'primary');\r\n    }\r\n    const handleClearClick = () =>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"clear the text\", 'danger');\r\n    }\r\n    const handleRemoveExtraSpaceClick = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"remove the extra space\", 'warning');\r\n    }\r\n    const textAreaChange = (event) =>{\r\n        console.log('text area changed');\r\n        setText(event.target.value);\r\n        props.showAlert(\"text area changed\", 'secondary');\r\n    }\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n        <h2 className='my-4'>{props.heading} - {text}</h2>\r\n        <div className=\"mb-3 mt-3\" style={{backgroundcolour: props.mode==='dark'? 'Grey': 'white', color:props.mode=== 'dark'?'white': 'black'}}>\r\n            <textarea className=\"form-control\" id=\"myBox\" rows=\"7\" value={text} onChange={textAreaChange}></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase {props.color}</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowerClick}>Convert to LowerCase {props.color}</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text {props.color}</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleRemoveExtraSpaceClick}>Remove Extra Space {props.color}</button>\r\n        </div>\r\n    <div className=\"container my-5\">\r\n        <h1>Your text summary </h1>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"enter some text\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, Component } from 'react';\nimport React from 'react';\nimport { render   }  from 'react-dom';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [color, setColor] = useState('white');\n  const [mode, setMode] = useState('dark');\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      Type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const updateColor = (color_name) => {\n    setColor(color_name)\n    console.log(color_name)\n    console.log(color)\n  }\n\n  let ToggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enable\", \"success\")\n      document.title = 'Text Utils- light mode';\n      // setInterval(() => {\n      //   document.title = \"TextUtils  is Amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils\";\n      // }, 1500);\n    }\n    else {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode has been enable\", \"warning\")\n      document.title = 'Text Utils dark mode';\n    }\n\n  }\n\n  return (\n    <div>\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} ToggleMode={ToggleMode} color={color} updateColor={updateColor} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter your text below\" showAlert={showAlert} mode={mode} color={color} updateColor={updateColor} />\n      <About />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}